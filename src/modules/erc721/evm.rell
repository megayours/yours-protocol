function _get_evm_account(evm_address: byte_array) {
  return ft4.accounts.auth_descriptor_signer @? { .id == evm_address } ( .account_auth_descriptor.account ) limit 1;
}

function _ensure_evm_account(evm_address: byte_array) {
  var account = _get_evm_account(evm_address);
  if (account != null) return account;

  account = create ft4.accounts.account ( evm_address, ft4.accounts.ACCOUNT_TYPE_USER );

  // Prepare auth descriptor
  val args = ft4.accounts.single_sig_args(flags = set(ft4.accounts.get_auth_flags_config().mandatory), signer = evm_address);
  val auth_descriptor = create ft4.accounts.account_auth_descriptor (
    id = evm_address,
    account,
    auth_type = ft4.accounts.auth_type.S,
    args = args.to_gtv().to_bytes(),
    rules = ft4.accounts.GTV_NULL.to_bytes(),
    ctr = 0,
    created = op_context.last_block_time
  );

  // Create signers for the main auth descriptor
  val main_ad_signers = _get_signers(auth_descriptor);
  for (signer in main_ad_signers) {
    create ft4.accounts.auth_descriptor_signer ( auth_descriptor, signer );
  }

  // Create main auth descriptor
  create ft4.accounts.main_auth_descriptor ( account, auth_descriptor );

  // Create misc account data
  ft4.accounts.create_rate_limiter_state_for_account(account);

  return account;
}

function _get_signers(auth_descriptor: ft4.accounts.account_auth_descriptor) {
  return when (auth_descriptor.auth_type) {
    S -> [ft4.accounts.single_sig_args.from_bytes(auth_descriptor.args).signer];
    M -> ft4.accounts.multi_sig_args.from_bytes(auth_descriptor.args).signers;
  };
}
