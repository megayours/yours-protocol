import lib.yours;

entity tracker {
  key yours.token;
  mutable last_block_time: integer;
}

@extend(yours.provide_properties)
function populate_metadata(yours.token, modules: set<name>): map<text, map<text, gtv>> {
  val properties = map<text, gtv>();
  if (not modules.contains("tracker")) return yours.provide_module_properties("tracker", properties);

  val tracker = tracker @? { token };
  if (tracker == null) return yours.provide_module_properties("tracker", properties);

  properties.put("Recent Fishing Game Visit", tracker.last_block_time.to_gtv());

  return yours.provide_module_properties("tracker", properties);
}

@extend(yours.receive_properties)
function handle_properties(yours.token, module_name: name, _: map<text, gtv>) {
  if (module_name != "tracker") return;
  yours.attach_module(token, module_name);
  val tracker = tracker @? { token };
  if (tracker == null) {
    create tracker ( token, op_context.last_block_time );
  } else {
    update tracker ( last_block_time = op_context.last_block_time );
  }
}
